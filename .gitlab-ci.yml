image: docker:24

variables:
  DOCKER_TLS_CERTDIR: "/certs"

stages:
  - build-common
  - build-base
  - build-dist
  - test
  - deploy
  - release

services:
  - docker:24-dind

include:
  - remote: https://gitlab.com/renovate-bot/renovate-runner/-/raw/v24.0.0/templates/renovate.gitlab-ci.yml

renovate:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "push"'

build-api-base:
  stage: build-base
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/api-base.dockerfile
    --builder=container
    --platform=linux/amd64
    -t $CI_REGISTRY_USER/api-base:latest
    -t $CI_REGISTRY_USER/api-base:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/api-base.dockerfile

build-api-dist:
  stage: build-dist
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/api-dist.dockerfile
    --builder=container
    --platform=linux/amd64
    -t $CI_REGISTRY_USER/api-dist:latest
    -t $CI_REGISTRY_USER/api-dist:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/api-base.dockerfile
          - dockerfiles/api-dist.dockerfile
          - src/phaidra-api/**/*

build-ui:
  stage: build-common
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/ui.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/ui:latest
    -t $CI_REGISTRY_USER/ui:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/ui.dockerfile
          - src/phaidra-ui/**/*
          - src/phaidra-vue-components/**/*

build-chronos-base:
  stage: build-base
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/chronos-base.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/chronos-base:latest
    -t $CI_REGISTRY_USER/chronos-base:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/chronos-base.dockerfile

build-chronos-dist:
  stage: build-dist
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/chronos-dist.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/chronos-dist:latest
    -t $CI_REGISTRY_USER/chronos-dist:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/chronos-base.dockerfile
          - dockerfiles/chronos-dist.dockerfile
          - container_init/chronos/**/*

build-httpd-shib-base:
  stage: build-base
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/httpd-shib-base.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/httpd-shib-base:latest
    -t $CI_REGISTRY_USER/httpd-shib-base:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/httpd-shib-base.dockerfile

build-httpd-shib-dist:
  stage: build-dist
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/httpd-shib-dist.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/httpd-shib-dist:latest
    -t $CI_REGISTRY_USER/httpd-shib-dist:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/httpd-shib-base.dockerfile
          - dockerfiles/httpd-shib-dist.dockerfile
          - container_init/httpd/phaidra-shib/httpd-shib-entrypoint.bash
          - container_init/httpd/phaidra-shib/conf/aconet-metadata-signing.crt
          - container_init/httpd/phaidra-shib/conf/attribute-map.xml
          - container_init/httpd/phaidra-shib/conf/attribute-policy.xml
          - container_init/httpd/phaidra-shib/conf/shibboleth2.xml
          - container_init/httpd/phaidra-shib/conf/phaidra-shib.conf

build-httpd-demo-dist:
  stage: build-dist
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/httpd-demo-dist.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/httpd-demo-dist:latest
    -t $CI_REGISTRY_USER/httpd-demo-dist:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/httpd-demo-dist.dockerfile
          - container_init/httpd/phaidra-demo/conf/phaidra-demo.conf

build-httpd-ssl-dist:
  stage: build-dist
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/httpd-ssl-dist.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/httpd-ssl-dist:latest
    -t $CI_REGISTRY_USER/httpd-ssl-dist:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/httpd-ssl-dist.dockerfile
          - container_init/httpd/phaidra-ssl/conf/phaidra-ssl.conf
          - container_init/httpd/phaidra-ssl/httpd-ssl-entrypoint.bash

          
build-imageserver:
  stage: build-common
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/imageserver.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/imageserver:latest
    -t $CI_REGISTRY_USER/imageserver:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/imageserver.dockerfile

build-3d-converter:
  stage: build-common
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/3d.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/3d-converter:latest
    -t $CI_REGISTRY_USER/3d-converter:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/3d.dockerfile
          - src/3d/**/*

build-pdf-extraction:
  stage: build-common
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/pdf_extraction.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/pdf-extraction:latest
    -t $CI_REGISTRY_USER/pdf-extraction:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/pdf_extraction.dockerfile
          - src/pdf_extraction/**/*

build-camel-toolbox:
  stage: build-common
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/camel.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/fcrepo-camel-toolbox:latest
    -t $CI_REGISTRY_USER/fcrepo-camel-toolbox:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/camel.dockerfile

build-pixelgecko-base:
  stage: build-base
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/pixelgecko-base.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/pixelgecko-base:latest
    -t $CI_REGISTRY_USER/pixelgecko-base:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/pixelgecko-base.dockerfile

build-pixelgecko-dist:
  stage: build-dist
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/pixelgecko-dist.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/pixelgecko-dist:latest
    -t $CI_REGISTRY_USER/pixelgecko-dist:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/pixelgecko-base.dockerfile
          - dockerfiles/pixelgecko-dist.dockerfile
          - src/pixelgecko/**/*

build-mariadb-phaidra-dist:
  stage: build-dist
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/mariadb-phaidra-dist.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/mariadb-phaidra-dist:latest
    -t $CI_REGISTRY_USER/mariadb-phaidra-dist:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/mariadb-phaidra-dist.dockerfile
          - container_init/mariadb/phaidradb/**/*

build-mariadb-fedora-dist:
  stage: build-dist
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/mariadb-fedora-dist.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/mariadb-fedora-dist:latest
    -t $CI_REGISTRY_USER/mariadb-fedora-dist:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/mariadb-fedora-dist.dockerfile
          - container_init/mariadb/fedoradb/**/*

build-mongodb-dist:
  stage: build-dist
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/mongodb-dist.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/mongodb-dist:latest
    -t $CI_REGISTRY_USER/mongodb-dist:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/mongodb-dist.dockerfile
          - container_init/mongodb/**/*

build-solr-dist:
  stage: build-dist
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/solr-dist.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/solr-dist:latest
    -t $CI_REGISTRY_USER/solr-dist:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/solr-dist.dockerfile
          - container_init/solr/**/*

build-openldap-dist:
  stage: build-dist
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/openldap-dist.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/openldap-dist:latest
    -t $CI_REGISTRY_USER/openldap-dist:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/openldap-dist.dockerfile
          - container_init/openldap/**/*

build-vige-base:
  stage: build-base
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/vige-base.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/vige-base:latest
    -t $CI_REGISTRY_USER/vige-base:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/vige-base.dockerfile

build-vige-dist:
  stage: build-dist
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/vige-dist.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/vige-dist:latest
    -t $CI_REGISTRY_USER/vige-dist:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/vige-base.dockerfile
          - dockerfiles/vige-dist.dockerfile
          - src/vige/**/*
          
build-promtail-dist:
  stage: build-dist
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/promtail-dist.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/promtail-dist:latest
    -t $CI_REGISTRY_USER/promtail-dist:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/promtail-dist.dockerfile
          - container_init/promtail/promtail-local-config.yaml

build-loki-dist:
  stage: build-dist
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/loki-dist.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/loki-dist:latest
    -t $CI_REGISTRY_USER/loki-dist:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/loki-dist.dockerfile
          - container_init/loki/loki-docker-config.yaml

build-grafana-dist:
  stage: build-dist
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/grafana-dist.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/grafana-dist:latest
    -t $CI_REGISTRY_USER/grafana-dist:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/grafana-dist.dockerfile
          - container_init/grafana/**/*

build-prometheus-dist:
  stage: build-dist
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker context create builder-context &&
    docker buildx create builder-context --name container --driver=docker-container &&
    docker buildx build -f dockerfiles/prometheus-dist.dockerfile
    --builder=container
    --platform=linux/amd64,linux/arm64
    -t $CI_REGISTRY_USER/prometheus-dist:latest
    -t $CI_REGISTRY_USER/prometheus-dist:$CI_COMMIT_SHORT_SHA --push .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      changes:
        paths:
          - dockerfiles/prometheus-dist.dockerfile
          - container_init/prometheus/prometheus.yaml

release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG                 # Run this job when a tag is created
  script:
    - echo "running release_job"
  release:                               # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG'

build-website-push-staging:
  stage: release
  script:
    - apk add rsync
    - mkdir ~/.ssh
    - echo "$SSH_RUNNER_KEY" >> ~/.ssh/id_ed25519
    - echo "$SSH_RUNNER_KEY_PUB" >> ~/.ssh/id_ed25519.pub
    - echo "$SSHD_PUBKEY_DOCS_SERVER" >> ~/.ssh/known_hosts
    - chmod 700 ~/.ssh
    - chmod 600 ~/.ssh/id_ed25519
    - chmod 644 ~/.ssh/id_ed25519.pub
    - chmod 644 ~/.ssh/known_hosts
    - docker run --rm -v ./:/docs squidfunk/mkdocs-material build
    - rsync -rvz --delete-after ./site/ "$SSH_RUNNER_USER_DOCS"@"$DOCS_SERVER":"$DESTINATION_DIR_STAGING"/
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      changes:
        paths:
          - website/**/*
          - mkdocs.yml

build-website-push-final:
  stage: release
  script:
    - apk add rsync
    - mkdir ~/.ssh
    - echo "$SSH_RUNNER_KEY" >> ~/.ssh/id_ed25519
    - echo "$SSH_RUNNER_KEY_PUB" >> ~/.ssh/id_ed25519.pub
    - echo "$SSHD_PUBKEY_DOCS_SERVER" >> ~/.ssh/known_hosts
    - chmod 700 ~/.ssh
    - chmod 600 ~/.ssh/id_ed25519
    - chmod 644 ~/.ssh/id_ed25519.pub
    - chmod 644 ~/.ssh/known_hosts
    - docker run --rm -v ./:/docs squidfunk/mkdocs-material build
    - rsync -rvz --delete-after ./site/ "$SSH_RUNNER_USER_DOCS"@"$DOCS_SERVER":"$DESTINATION_DIR_FINAL"/
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        paths:
          - website/**/*
          - mkdocs.yml
