<!DOCTYPE html>
<html>
<head>
    <title>3D Model Viewer</title>
    <style>
        body { margin: 0; }
        canvas { width: 100%; height: 100%; }
        #info {
            position: absolute;
            top: 10px;
            width: 100%;
            text-align: center;
            color: white;
            pointer-events: none;
            font-family: Arial, sans-serif;
        }
    </style>
</head>
<body>
    <div id="info">3D Model Viewer - Use mouse to rotate, right-click to pan, scroll to zoom</div>
    <script src="<%= $scheme %>://<%= $baseurl %>/<%= $basepath %>/threejs/build/three.min.js"></script>
    <script src="<%= $scheme %>://<%= $baseurl %>/<%= $basepath %>/threejs/build/OrbitControls.js"></script>
    <script src="<%= $scheme %>://<%= $baseurl %>/<%= $basepath %>/threejs/build/GLTFLoader.js"></script>
    <script>
        // Initialize scene
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setClearColor(0x000000, 0);
        if (THREE.sRGBEncoding) renderer.outputEncoding = THREE.sRGBEncoding;
        if (THREE.ACESFilmicToneMapping) renderer.toneMapping = THREE.ACESFilmicToneMapping;
        renderer.toneMappingExposure = 1.2;
        document.body.appendChild(renderer.domElement);

        // Add lights
        const ambientLight = new THREE.AmbientLight(0xffffff, 1.0);
        scene.add(ambientLight);
        const hemiLight = new THREE.HemisphereLight(0xffffff, 0x888888, 0.6);
        hemiLight.position.set(0, 1, 0);
        scene.add(hemiLight);
        const directionalLight = new THREE.DirectionalLight(0xffffff, 1.2);
        directionalLight.position.set(5, 10, 7.5);
        scene.add(directionalLight);
        const fillLight = new THREE.DirectionalLight(0xffffff, 0.6);
        fillLight.position.set(-5, -2, -5);
        scene.add(fillLight);

        // Add controls
        const controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        controls.dampingFactor = 0.05;

        // Set camera position
        camera.position.z = 5;

        // Build simple filename -> base64 map from server
        const resourceMapB64 = '<%= $resource_map_b64 // "" %>';
        let resourceNameToBase64 = {};
        if (resourceMapB64 && resourceMapB64.length > 0) {
            try {
                const rmJson = atob(resourceMapB64);
                resourceNameToBase64 = JSON.parse(rmJson);
            } catch (e) {
                console.warn('Failed to parse resource map:', e);
            }
        }

        function base64ToObjectURL(base64, mime) {
            if (!base64) return null;
            const binaryString = atob(base64);
            const bytes = new Uint8Array(binaryString.length);
            for (let i = 0; i < binaryString.length; i++) bytes[i] = binaryString.charCodeAt(i);
            const blob = new Blob([bytes], { type: mime });
            return URL.createObjectURL(blob);
        }

        const manager = new THREE.LoadingManager();
        manager.setURLModifier((url) => {
            const name = url.split("/").pop();
            if (name && resourceNameToBase64[name]) {
                if(name.endsWith('.bin')) {
                    return base64ToObjectURL(resourceNameToBase64[name], "application/octet-stream")
                } else if(name.endsWith('.jpg')) {
                    return base64ToObjectURL(resourceNameToBase64[name], "image/jpeg")
                }
            };
            return url;
        });

        // Load the GLTF model
        const loader = new THREE.GLTFLoader(manager);
        const modelContent = '<%= $model_b64 %>';
        
        try {
            // Decode base64 content
            const binaryString = atob(modelContent);
            const bytes = new Uint8Array(binaryString.length);
            for (let i = 0; i < binaryString.length; i++) {
                bytes[i] = binaryString.charCodeAt(i);
            }
            
            // Create a blob from the decoded content
            const blob = new Blob([bytes], { type: 'model/gltf+json' });
            const url = URL.createObjectURL(blob);
            
            loader.load(url, function(gltf) {
                const model = gltf.scene;
                scene.add(model);

                // Compute bounds
                const box = new THREE.Box3().setFromObject(model);
                const size = box.getSize(new THREE.Vector3());
                const center = box.getCenter(new THREE.Vector3());
                const maxDim = Math.max(size.x, size.y, size.z);
                const radius = maxDim * 0.5;

                // Frame the model: place camera back by the distance needed for FOV
                const fov = camera.fov * Math.PI / 180; // radians
                const fitHeightDistance = radius / Math.tan(fov / 2);
                const distance = fitHeightDistance * 1.2; // extra padding

                camera.near = Math.max(0.01, distance / 100);
                camera.far = distance * 100;
                camera.updateProjectionMatrix();

                // Position camera with a slight elevation
                const dir = new THREE.Vector3(0, radius * 0.3, distance);
                camera.position.copy(center).add(dir);
                camera.lookAt(center);

                // Controls configuration
                controls.target.copy(center);
                controls.minDistance = Math.max(0.01, radius * 0.1);
                controls.maxDistance = radius * 20;
                controls.update();
                
                // Clean up the blob URL
                URL.revokeObjectURL(url);
            }, undefined, function(error) {
                console.error('Error loading model:', error);
                document.getElementById('info').innerHTML = 'Error loading 3D model';
            });
        } catch (error) {
            console.error('Error processing model:', error);
            document.getElementById('info').innerHTML = 'Error processing 3D model';
        }

        // Handle window resize
        window.addEventListener('resize', onWindowResize, false);
        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        // Animation loop
        function animate() {
            requestAnimationFrame(animate);
            controls.update();
            renderer.render(scene, camera);
        }
        animate();
    </script>
</body>
</html> 