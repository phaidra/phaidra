<!DOCTYPE html>
<html>
<head>
    <title>3D Model Viewer</title>
    <style>
        body { margin: 0; }
        canvas { width: 100%; height: 100%; }
        #info {
            position: absolute;
            top: 10px;
            width: 100%;
            text-align: center;
            color: white;
            pointer-events: none;
            font-family: Arial, sans-serif;
        }
        #loader {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(0,0,0,0.6);
            color: #fff;
            font-family: Arial, sans-serif;
            font-size: 14px;
            z-index: 9999;
        }
        #loader.hidden { display: none; }
    </style>
</head>
<body>
    <div id="info">3D Model Viewer - Use mouse to rotate, right-click to pan, scroll to zoom</div>
    <div id="loader"><span id="loader-text">Loading model… 0%</span></div>
    <script src="<%= $scheme %>://<%= $baseurl %>/<%= $basepath %>/threejs/build/three.min.js"></script>
    <script src="<%= $scheme %>://<%= $baseurl %>/<%= $basepath %>/threejs/build/OrbitControls.js"></script>
    <script src="<%= $scheme %>://<%= $baseurl %>/<%= $basepath %>/threejs/build/GLTFLoader.js"></script>
    <script>
        // Initialize scene
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setClearColor(0x000000, 0);
        if (THREE.sRGBEncoding) renderer.outputEncoding = THREE.sRGBEncoding;
        if (THREE.ACESFilmicToneMapping) renderer.toneMapping = THREE.ACESFilmicToneMapping;
        renderer.toneMappingExposure = 1.2;
        document.body.appendChild(renderer.domElement);

        // Add lights
        const ambientLight = new THREE.AmbientLight(0xffffff, 1.0);
        scene.add(ambientLight);
        const hemiLight = new THREE.HemisphereLight(0xffffff, 0x888888, 0.6);
        hemiLight.position.set(0, 1, 0);
        scene.add(hemiLight);
        const directionalLight = new THREE.DirectionalLight(0xffffff, 1.2);
        directionalLight.position.set(5, 10, 7.5);
        scene.add(directionalLight);
        const fillLight = new THREE.DirectionalLight(0xffffff, 0.6);
        fillLight.position.set(-5, -2, -5);
        scene.add(fillLight);

        // Add controls
        const controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        controls.dampingFactor = 0.05;

        // Set camera position
        camera.position.z = 5;


        const manager = new THREE.LoadingManager();
        const loaderOverlay = document.getElementById('loader');
        const loaderText = document.getElementById('loader-text');
        manager.onStart = function(url, itemsLoaded, itemsTotal) {
            if (loaderOverlay) loaderOverlay.classList.remove('hidden');
            if (loaderText) loaderText.textContent = 'Loading model… 0%';
        };
        manager.onProgress = function(url, itemsLoaded, itemsTotal) {
            if (!itemsTotal) return;
            const pct = Math.min(100, Math.round(itemsLoaded / itemsTotal * 100));
            console.log('pct', pct)
            if (loaderText) loaderText.textContent = `Loading model… ${pct}%`;
        };
        manager.onLoad = function() {
            if (loaderOverlay) loaderOverlay.classList.add('hidden');
        };
        manager.onError = function(url) {
            if (loaderText) loaderText.textContent = 'Error loading resources';
        };
        manager.setURLModifier((url) => {
            const name = url.split("/").pop();
            if(name && name.includes('.') && !url.includes('3d_resource')) {
                return `<%= $scheme %>://<%= $baseurl %>/<%= $basepath %>/object/<%= $pid %>/3d_resource?filename=${name}`;
            }
            return url;
        });

        // Load the GLTF model directly from URL
        const loader = new THREE.GLTFLoader(manager);
        const gltfUrl = '<%= $gltf_url %>';
        console.log('GLTF URL:', gltfUrl);
        
        loader.load(gltfUrl, function(gltf) {
            const model = gltf.scene;
            scene.add(model);

            // Compute bounds
            const box = new THREE.Box3().setFromObject(model);
            const size = box.getSize(new THREE.Vector3());
            const center = box.getCenter(new THREE.Vector3());
            const maxDim = Math.max(size.x, size.y, size.z);
            const radius = maxDim * 0.5;

            // Frame the model: place camera back by the distance needed for FOV
            const fov = camera.fov * Math.PI / 180; // radians
            const fitHeightDistance = radius / Math.tan(fov / 2);
            const distance = fitHeightDistance * 1.2; // extra padding

            camera.near = Math.max(0.01, distance / 100);
            camera.far = distance * 100;
            camera.updateProjectionMatrix();

            // Position camera with a slight elevation
            const dir = new THREE.Vector3(0, radius * 0.3, distance);
            camera.position.copy(center).add(dir);
            camera.lookAt(center);

            // Controls configuration
            controls.target.copy(center);
            controls.minDistance = Math.max(0.01, radius * 0.1);
            controls.maxDistance = radius * 20;
            controls.update();
            
        }, undefined, function(error) {
            console.error('Error loading model:', error);
            document.getElementById('info').innerHTML = 'Error loading 3D model';
            if (loaderText) loaderText.textContent = 'Error loading 3D model';
            if (loaderOverlay) loaderOverlay.classList.remove('hidden');
        });

        // Handle window resize
        window.addEventListener('resize', onWindowResize, false);
        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        // Animation loop
        function animate() {
            requestAnimationFrame(animate);
            controls.update();
            renderer.render(scene, camera);
        }
        animate();
    </script>
</body>
</html> 